// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/practo/k8s-worker-pod-autoscaler/pkg/queue (interfaces: BeanstalkClientInterface)

// Package queue is a generated GoMock package.

// To generate the mock again, use below command: (after getting the mockgen package in vendor directory)
// ~/go/bin/mockgen  --build_flags=--mod=vendor  -destination=./pkg/queue/beanstalk_mock.go -package=queue github.com/practo/k8s-worker-pod-autoscaler/pkg/queue BeanstalkClientInterface

package queue

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBeanstalkClientInterface is a mock of BeanstalkClientInterface interface
type MockBeanstalkClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBeanstalkClientInterfaceMockRecorder
}

// MockBeanstalkClientInterfaceMockRecorder is the mock recorder for MockBeanstalkClientInterface
type MockBeanstalkClientInterfaceMockRecorder struct {
	mock *MockBeanstalkClientInterface
}

// NewMockBeanstalkClientInterface creates a new mock instance
func NewMockBeanstalkClientInterface(ctrl *gomock.Controller) *MockBeanstalkClientInterface {
	mock := &MockBeanstalkClientInterface{ctrl: ctrl}
	mock.recorder = &MockBeanstalkClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeanstalkClientInterface) EXPECT() *MockBeanstalkClientInterfaceMockRecorder {
	return m.recorder
}

// getStats mocks base method
func (m *MockBeanstalkClientInterface) getStats() (int32, int32, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStats")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(int32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// getStats indicates an expected call of getStats
func (mr *MockBeanstalkClientInterfaceMockRecorder) getStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStats", reflect.TypeOf((*MockBeanstalkClientInterface)(nil).getStats))
}

// longPollReceiveMessage mocks base method
func (m *MockBeanstalkClientInterface) longPollReceiveMessage(arg0 int64) (int32, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "longPollReceiveMessage", arg0)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// longPollReceiveMessage indicates an expected call of longPollReceiveMessage
func (mr *MockBeanstalkClientInterfaceMockRecorder) longPollReceiveMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "longPollReceiveMessage", reflect.TypeOf((*MockBeanstalkClientInterface)(nil).longPollReceiveMessage), arg0)
}

// put mocks base method
func (m *MockBeanstalkClientInterface) put(arg0 []byte, arg1 uint32, arg2, arg3 time.Duration) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// put indicates an expected call of put
func (mr *MockBeanstalkClientInterfaceMockRecorder) put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "put", reflect.TypeOf((*MockBeanstalkClientInterface)(nil).put), arg0, arg1, arg2, arg3)
}
